
class Solution {
public:
    std::vector<std::vector<int>> onesMinusZeros(std::vector<std::vector<int>>& grid) {
        if (grid.empty() || grid[0].empty()) {
            return {}; 
        }

        std::vector<std::vector<int>> result;
        result.resize(grid.size(), std::vector<int>(grid[0].size()));

        for (int i = 0; i < grid.size(); i++) {
            for (int j = 0; j < grid[i].size(); j++) {
                int onesC = 0;
                int zeroC = 0;

                for (int k = 0; k < grid.size(); k++) {
                    if (grid[k][j] == 1) {
                        onesC += 1;
                    } else {
                        zeroC += 1;
                    }
                }

                for (int k = 0; k < grid[i].size(); k++) {
                    if (grid[i][k] == 1) {
                        onesC += 1;
                    } else {
                        zeroC += 1;
                    }
                }

                result[i][j] = onesC - zeroC;
            }
        }

        return result;
    }
};
